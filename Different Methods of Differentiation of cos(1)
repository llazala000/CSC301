{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  cos(1)    Derivative of cos(1)    Numerical Derivative    Absolute Error    Relative Error\n",
      "--------  ----------------------  ----------------------  ----------------  ----------------\n",
      "0.540302               -0.841471               -0.841471       3.52246e-07      -4.18608e-07\n",
      "\n",
      "\n",
      "  cos(1)    Derivative of cos(1)    Taylor Series Derivative    Absolute Error    Relative Error\n",
      "--------  ----------------------  --------------------------  ----------------  ----------------\n",
      "0.540302               -0.841471                   -0.841471                 0                -0\n",
      "\n",
      "\n",
      "  cos(1)    Derivative of cos(1)    Three Point Derivative    Absolute Error    Relative Error\n",
      "--------  ----------------------  ------------------------  ----------------  ----------------\n",
      "0.540302               -0.841471                 -0.514395         -0.327076          0.635846\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "from tabulate import tabulate\n",
    "\n",
    "cos = (math.cos(1))\n",
    "exact_val = (-math.sin(1))\n",
    "derivList = list()\n",
    "AbsErr = list()\n",
    "RelErr = list()\n",
    "\n",
    "\n",
    "def factorial(number):\n",
    "    if number < 2:\n",
    "        return 1\n",
    "    else:\n",
    "        return number * factorial(number-1)\n",
    "\n",
    "def num_df(x0): #numerical differentiation\n",
    "    h = 0.00000000001\n",
    "    s = (math.cos(x0 + h) - math.cos(x0))/h\n",
    "    derivList.append(s)\n",
    "    AbsErr.append(exact_val - s)\n",
    "    RelErr.append((exact_val - s)/s)\n",
    "\n",
    "def taylor_df(x): #taylor series\n",
    "    s = 0\n",
    "    #derivative of cos(x) = -sin(x) so i'll use the taylor series of sin(x)\n",
    "    for n in range (1000): # not infinity but it'll do so we can get an estimate\n",
    "        s = s + ((-1)**n)*((x**(2*n+1))/(factorial(2*n+1)))\n",
    "    df = (-1*s)    \n",
    "    derivList.append(df)\n",
    "    AbsErr.append(exact_val - df)\n",
    "    RelErr.append((exact_val - df)/df)\n",
    "\n",
    "def three_pt_df(x): #three point derivative\n",
    "    h = 0.000000001\n",
    "    x0 = math.cos(x)\n",
    "    x1 = x0 + h\n",
    "    x2 = x0 + (2*h)\n",
    "    df = (1/(2*h))*(((-3)*math.cos(x0))+(4*math.cos(x1))-math.cos(x2)) + (((h**2)/3)*(math.cos(x)**3))\n",
    "    derivList.append(df)\n",
    "    AbsErr.append(exact_val - df)\n",
    "    RelErr.append((exact_val - df)/df)\n",
    "\n",
    "    \n",
    "num_df(1)\n",
    "taylor_df(1)\n",
    "three_pt_df(1)\n",
    ";\n",
    "    \n",
    "print(tabulate([[cos, exact_val, derivList[0], AbsErr[0], RelErr[0]]],\n",
    "               headers=['cos(1)','Derivative of cos(1)', 'Numerical Derivative', 'Absolute Error', \"Relative Error\"])) \n",
    "print(\"\\n\")\n",
    "\n",
    "# The result of the numerical derivative are consistent with what I expected. There is a very small absolute error and relative\n",
    "# error because I made h a very small number for the sake of the approximation but it can always be smaller. \n",
    "\n",
    "print(tabulate([[cos, exact_val, derivList[1], AbsErr[1], RelErr[1]]],\n",
    "               headers=['cos(1)','Derivative of cos(1)', 'Taylor Series Derivative', 'Absolute Error', \"Relative Error\"])) \n",
    "print(\"\\n\")\n",
    "\n",
    "#The result of the Taylor series derivative is consistent. I was surprised that there is no absolute or relative error because\n",
    "# I only ran the series until n = 1000. I figured there would be a very small error since 1000 is far from infinity. \n",
    "\n",
    "print(tabulate([[cos, exact_val, derivList[2], AbsErr[2], RelErr[2]]],\n",
    "               headers=['cos(1)','Derivative of cos(1)', 'Three Point Derivative', 'Absolute Error', \"Relative Error\"]))  \n",
    "print(\"\\n\")\n",
    "\n",

   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
